apiVersion: policy.jspolicy.com/v1beta1
kind: JsPolicy
metadata:
  name: "sync-secrets.example.com"
spec:
  operations: ["CREATE"]
  resources: ["secrets"]
  # If type is Controller, the policy will behave like a regular
  # Kubernetes controller and the policy logic will be called in each
  # reconcile. A controller will receive watch events from 
  # Kubernetes directly and can act on those. This makes it possible 
  # to change cluster state based on cluster changes immediately or to enforce 
  # policies on objects that already exist. JsPolicy makes sure that at all times only
  # one instance of this policy is running, so you don't have to fear
  # race conditions. Find out more about controllers in Kubernetes at 
  # https://kubernetes.io/docs/concepts/architecture/controller/
  #
  # You can use deny() to report violations or change the cluster state 
  # via the create(), update() and remove() functions directly. Note that 
  # a change to a resource that is watched by this policy will immediately 
  # trigger a reconcile on this policy.
  # 
  # Each controller policy will initially receive a CREATE event
  # for each resource that already exists. On each change to a specified
  # resource the policy will receive either a CREATE event (for changed
  # or newly created objects) or a DELETE event for deleted objects.
  # In addition, when the underlying resource informer is re-synced,
  # CREATE events will be emitted again for all existing resources. 
  type: Controller
  javascript: |
    // this policy will sync changes to a secret to all other secrets in the cluster
    // that have labels in the form of: {"owner-name": SECRET, "owner-namespace": NAMESPACE}
    
    // is this a parent or child secret?
    const labels = request.object.metadata?.labels;
    let syncSecret = undefined; 
    if (labels?.["sync"] === "true") {
      syncSecret = request.object;
    } else if (labels?.["owner-name"] && labels?.["owner-namespace"]) {
      syncSecret = get("Secret", "v1", labels?.["owner-namespace"] + "/" + labels?.["owner-name"]);
    }
    
    // this is not a secret we should sync
    if (!syncSecret) {
      allow();
    }
    
    // list all owned secrets
    list("Secret", "v1", {
      labelSelector: `owner-name=${syncSecret.metadata.name},owner-namespace=${syncSecret.metadata.namespace}`
    }).forEach(secret => {
      // only update if data has actually changed
      if (JSON.stringify(secret.data) === JSON.stringify(syncSecret.data)) {
        return;
      }
    
      // sync the secret data
      secret.data = syncSecret.data;
      const updateResult = update(secret);
      if (!updateResult.ok) {
        // just requeue if we encounter an error
        requeue(updateResult.message);
      } else {
        print(`Successfully synced secret ${secret.metadata.namespace}/${secret.metadata.name}`);
      }
    });
    